services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # RabbitMQ default port
      - "15672:15672" # RabbitMQ management UI
      - "15692:15692" # Prometheus metrics endpoint
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 10
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    #cpus: '0.5'  # Limit to 50% of a single CPU core

  mysqldb_admin:
    image: mysql:latest
    container_name: mysqldb_admin
    ports:
      - "3307:3306"
    env_file:
      - .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_DB_ADMIN_ROOTPASSWORD}
    volumes:
      - mysqldb_admin:/var/lib/mysql
      - ./init_db/init_admin_db.sql:/docker-entrypoint-initdb.d/init_admin_db.sql

  mongodb_auth:
    image: mongo:latest
    container_name: mongodb_auth
    ports:
      - "27019:27017"
    env_file:
      - .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_DB_AUTH_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_DB_AUTH_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=kea_cars_auth_dev
    volumes:
      - mongodb_auth:/data/db

  mongodb_customer:
    image: mongo:latest
    container_name: mongodb_customer
    ports:
      - "27018:27017"
    env_file:
      - .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_DB_CUSTOMER_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_DB_CUSTOMER_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=kea_cars_customer_dev
    volumes:
      - mongodb_customer:/data/db

  mysqldb_employee:
    image: mysql:latest
    container_name: mysqldb_employee
    ports:
      - "3308:3306"
    env_file:
      - .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_DB_EMPLOYEE_ROOT_PASSWORD}
    volumes:
      - mysqldb_employee:/var/lib/mysql
      - ./init_db/init_employee_db.sql:/docker-entrypoint-initdb.d/init_employee_db.sql

  seed_mongodb_auth:
    build:
      context: ./auth_microservice
      dockerfile: scripts/Dockerfile
    image: seed_mongodb_auth_image:latest # Explicitly name the image
    container_name: seed_mongodb_auth
    depends_on:
      - mongodb_auth
    env_file:
      - ./auth_microservice/.env

  seed_mongodb_customer:
    build:
      context: ./customer_microservice
      dockerfile: scripts/Dockerfile
    image: seed_mongodb_customer_image:latest # Explicitly name the image
    container_name: seed_mongodb_customer
    depends_on:
      - mongodb_customer
    env_file:
      - ./customer_microservice/.env

  admin_microservice:
    build:
      context: ./admin_microservice
      dockerfile: Dockerfile
    image: admin_microservice_image:latest # Explicitly name the image
    container_name: admin_microservice
    ports:
      - "8000:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mysqldb_admin:
        condition: service_started
    env_file:
      - ./admin_microservice/.env
    volumes:
      - ./admin_microservice:/app

  auth_microservice:
    build:
      context: ./auth_microservice
      dockerfile: Dockerfile
    image: auth_microservice_image:latest # Explicitly name the image
    container_name: auth_microservice
    ports:
      - "8001:8001"
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - ./auth_microservice/.env
    volumes:
      - ./auth_microservice:/app

  customer_microservice:
    build:
      context: ./customer_microservice
      dockerfile: Dockerfile
    image: customer_microservice_image:latest # Explicitly name the image
    container_name: customer_microservice
    ports:
      - "8002:8002"
    depends_on:
      - mongodb_customer
      - seed_mongodb_customer
    env_file:
      - ./customer_microservice/.env
    volumes:
      - ./customer_microservice:/app

  employee_microservice:
    build:
      context: ./employee_microservice
      dockerfile: Dockerfile
    image: employee_microservice_image:latest # Explicitly name the image
    container_name: employee_microservice
    ports:
      - "8003:8003"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mysqldb_employee:
        condition: service_started
    env_file:
      - ./employee_microservice/.env
    volumes:
      - ./employee_microservice:/app

  synch_microservice:
    build:
      context: ./synch_microservice
      dockerfile: Dockerfile
    image: synch_microservice_image:latest # Explicitly name the image
    container_name: synch_microservice
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb_customer:
        condition: service_started
    env_file:
      - ./synch_microservice/.env
    volumes:
      - ./synch_microservice:/app

volumes:
  rabbitmq_data:
  mysqldb_admin:
  mongodb_auth:
  mongodb_customer:
  mysqldb_employee:
